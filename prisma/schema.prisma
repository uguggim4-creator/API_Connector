// Prisma 스키마 파일

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// AI 플랫폼 정보
model Platform {
  id          String   @id @default(cuid())
  name        String   @unique // "openai", "gemini", "veo", "kling", "seedream"
  displayName String   // "OpenAI", "Google Gemini", etc.
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  apiKeys     ApiKey[]
  usageLogs   UsageLog[]
}

// API 키 관리
model ApiKey {
  id          String   @id @default(cuid())
  platformId  String
  platform    Platform @relation(fields: [platformId], references: [id], onDelete: Cascade)

  // 암호화된 API 키 저장
  encryptedKey String
  keyName      String?  // 키 별칭 (예: "Production Key", "Test Key")

  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastUsedAt  DateTime?

  usageLogs   UsageLog[]

  @@index([platformId])
}

// 사용 로그
model UsageLog {
  id          String   @id @default(cuid())
  platformId  String
  platform    Platform @relation(fields: [platformId], references: [id], onDelete: Cascade)

  apiKeyId    String
  apiKey      ApiKey   @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)

  // 요청 정보
  endpoint    String   // API 엔드포인트
  method      String   // GET, POST, etc.
  model       String?  // 사용된 모델 (예: "gpt-4", "gemini-pro")

  // 응답 정보
  statusCode  Int
  success     Boolean
  errorMessage String?

  // 사용량 정보
  tokensUsed  Int?     // 토큰 사용량 (해당하는 경우)
  cost        Float?   // 비용 (USD)

  // 메타데이터
  requestData Json?    // 요청 데이터 (민감정보 제외)
  responseData Json?   // 응답 데이터 (요약본)

  duration    Int?     // 응답 시간 (ms)

  createdAt   DateTime @default(now())

  @@index([platformId])
  @@index([apiKeyId])
  @@index([createdAt])
}
